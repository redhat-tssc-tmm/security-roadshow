#!/bin/bash

# setup-acs-integration.sh: Configure ACS integration for Quay and set up API token

# Helper functions for output
print_status() {
    echo "[INFO] $1"
}

print_error() {
    echo "[ERROR] $1" >&2
}

print_status "Setting up ACS (Advanced Cluster Security) integration..."

# Hardcoded ACS endpoint
export ROX_ENDPOINT="central.tssc-acs.svc.cluster.local:443"

# Check if tssc-acs namespace exists
if ! oc get namespace tssc-acs >/dev/null 2>&1; then
    print_error "Namespace 'tssc-acs' not found. ACS integration will not be configured."
    return 0 2>/dev/null || exit 0
fi

# Check if quay-enterprise namespace exists
if ! oc get namespace quay-enterprise >/dev/null 2>&1; then
    print_error "Namespace 'quay-enterprise' not found. ACS integration will not be configured."
    return 0 2>/dev/null || exit 0
fi

print_status "Required namespaces found. Retrieving credentials..."

# Get ACS admin password
print_status "Retrieving ACS admin password..."
ADMIN_PASSWORD=$(oc get secret central-htpasswd -n tssc-acs -o jsonpath='{.data.password}' 2>/dev/null | base64 -d)
if [[ -z "$ADMIN_PASSWORD" ]]; then
    print_error "Could not retrieve ACS admin password from tssc-acs namespace"
    return 0 2>/dev/null || exit 0
fi

# Get Quay admin token
print_status "Retrieving Quay admin token..."
QUAY_ADMIN_TOKEN=$(oc get secret quay-admin-token -n quay-enterprise -o jsonpath='{.data.token}' 2>/dev/null | base64 -d)
if [[ -z "$QUAY_ADMIN_TOKEN" ]]; then
    print_error "Could not retrieve Quay admin token from quay-enterprise namespace"
    return 0 2>/dev/null || exit 0
fi

# Get Quay route
print_status "Retrieving Quay route..."
QUAY_HOST=$(oc get route quay-quay -n quay-enterprise -o jsonpath='{.spec.host}' 2>/dev/null)
if [[ -z "$QUAY_HOST" ]]; then
    print_error "Could not retrieve Quay route from quay-enterprise namespace"
    return 0 2>/dev/null || exit 0
fi
QUAY_ENDPOINT="https://${QUAY_HOST}"

print_status "Credentials retrieved successfully"
print_status "ROX_ENDPOINT: $ROX_ENDPOINT"
print_status "QUAY_ENDPOINT: $QUAY_ENDPOINT"

# Generate ACS API token
print_status "Generating ACS API token with Admin role..."
TOKEN_RESPONSE=$(curl -k -s -u "admin:${ADMIN_PASSWORD}" \
  "https://${ROX_ENDPOINT}/v1/apitokens/generate" \
  -H "Content-Type: application/json" \
  -d '{"name":"roxctl-token-'$(date +%Y-%m-%d_%H-%M-%S)'","role":"Admin"}')

export ROX_API_TOKEN=$(echo "$TOKEN_RESPONSE" | grep -o '"token":"[^"]*"' | sed 's/"token":"//;s/"//')

if [[ -z "$ROX_API_TOKEN" ]]; then
    print_error "Failed to generate ACS API token"
    print_error "Response: $TOKEN_RESPONSE"
    return 0 2>/dev/null || exit 0
fi

print_status "✓ ACS API token generated"

# Write ROX credentials to file
ACS_CREDENTIALS_FILE="/home/student/.acs_credentials"
print_status "Writing ACS credentials to $ACS_CREDENTIALS_FILE..."

cat > "$ACS_CREDENTIALS_FILE" << EOF
# ACS (Advanced Cluster Security) credentials
# Generated by setup-acs-integration.sh
export ROX_ENDPOINT="$ROX_ENDPOINT"
export ROX_API_TOKEN="$ROX_API_TOKEN"
EOF

chmod 600 "$ACS_CREDENTIALS_FILE"
print_status "✓ ACS credentials saved to $ACS_CREDENTIALS_FILE"

# Check if Quay registry integration already exists
print_status "Checking for existing Quay registry integration..."
EXISTING_INTEGRATION=$(curl -k -s \
  "https://${ROX_ENDPOINT}/v1/imageintegrations" \
  -H "Authorization: Bearer ${ROX_API_TOKEN}" \
  | grep -o '"name":"ADS L3 Quay Registry"')

if [[ -n "$EXISTING_INTEGRATION" ]]; then
    print_status "✓ Quay registry integration 'ADS L3 Quay Registry' already exists. Skipping creation."
else
    # Add Quay registry integration to ACS
    print_status "Adding Quay registry integration to ACS..."
    INTEGRATION_RESPONSE=$(curl -k -s -X POST \
      "https://${ROX_ENDPOINT}/v1/imageintegrations" \
      -H "Authorization: Bearer ${ROX_API_TOKEN}" \
      -H "Content-Type: application/json" \
      -d '{
        "name": "ADS L3 Quay Registry",
        "type": "quay",
        "categories": ["REGISTRY"],
        "quay": {
          "endpoint": "'${QUAY_HOST}'",
          "registryRobotCredentials": {
            "username": "$oauthtoken",
            "password": "'${QUAY_ADMIN_TOKEN}'"
          },
          "insecure": true
        },
        "skipTestIntegration": false
      }')

    if echo "$INTEGRATION_RESPONSE" | grep -q '"id"'; then
        print_status "✓ Quay registry integration created successfully"
    else
        print_error "Failed to create Quay registry integration"
        print_error "Response: $INTEGRATION_RESPONSE"
    fi
fi

print_status "ACS integration setup complete!"
print_status ""
print_status "ACS credentials are available in your session:"
print_status "  ROX_ENDPOINT: $ROX_ENDPOINT"
print_status "  ROX_API_TOKEN: [set]"
